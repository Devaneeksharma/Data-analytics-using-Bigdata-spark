{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "# FIT5202: Assignment-1 Task B\n",
    "\n",
    "In part-B criminal data from the south australia is been analysed by using the mongo db and diffrent questions is been answers.  \n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## Import and Initialise pyspark\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "# importing the date time\n",
    "from datetime import datetime\n",
    "os.environ['PYSPARK_SUBMIT_ARGS'] = '--packages org.mongodb.spark:mongo-spark-connector_2.11:2.4.0 pyspark-shell'\n",
    "# create entry points to spark\n",
    "from pyspark import SparkContext\n",
    "# spark SQL\n",
    "from pyspark.sql import SparkSession \n",
    "# spark SQL functions\n",
    "from pyspark.sql.functions import avg,stddev,to_date,udf,col,year,month,dayofweek,concat\n",
    "# Spark SQL Types\n",
    "from pyspark.sql.types import DateType,IntegerType\n",
    "# matplot libarary for visualization\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "sc = SparkContext.getOrCreate()\n",
    "\n",
    "# seeting u the mongo db\n",
    "spark = SparkSession(sparkContext=sc)\\\n",
    "        .builder\\\n",
    "        .appName(\"MongoDB and Apache Spark\")\\\n",
    "        .config(\"spark.jars.packages\", \"org.mongodb.spark:mongo-spark-connector_2.11:2.4.0\")\\\n",
    "        .config(\"spark.mongodb.input.uri\", \"mongodb://127.0.0.1/fit5202_db_Devaneek_A1.coll_assignment1\")\\\n",
    "        .config(\"spark.mongodb.output.uri\", \"mongodb://127.0.0.1/fit5202_db_Devaneek_A1.coll_assignment1\")\\\n",
    "        .getOrCreate()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## Creating the dataframe\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of records in the spark dataframe: 727408\n"
     ]
    }
   ],
   "source": [
    "# create the spark data frame\n",
    "crime_data = spark.read.csv(\"Crime_Statistics_SA_2010_present.csv\", header=True )\n",
    "print(\"Number of records in the spark dataframe:\",crime_data.count())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## Write to Mongo db database\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+-----------------+-------------------+---------------------------+---------------------------+---------------------------+-------------+\n",
      "|Reported Date|Suburb - Incident|Postcode - Incident|Offence Level 1 Description|Offence Level 2 Description|Offence Level 3 Description|Offence Count|\n",
      "+-------------+-----------------+-------------------+---------------------------+---------------------------+---------------------------+-------------+\n",
      "|    1/07/2010|         ADELAIDE|               5000|       OFFENCES AGAINST ...|       FRAUD DECEPTION A...|       Obtain benefit by...|            2|\n",
      "|    1/07/2010|         ADELAIDE|               5000|       OFFENCES AGAINST ...|       PROPERTY DAMAGE A...|       Other property da...|            2|\n",
      "|    1/07/2010|         ADELAIDE|               5000|       OFFENCES AGAINST ...|       SERIOUS CRIMINAL ...|        SCT - Non Residence|            1|\n",
      "|    1/07/2010|         ADELAIDE|               5000|       OFFENCES AGAINST ...|       THEFT AND RELATED...|                Other theft|            6|\n",
      "|    1/07/2010|         ADELAIDE|               5000|       OFFENCES AGAINST ...|       THEFT AND RELATED...|            Theft from shop|            3|\n",
      "|    1/07/2010|         ADELAIDE|               5000|       OFFENCES AGAINST ...|       ACTS INTENDED TO ...|             Common Assault|            2|\n",
      "|    1/07/2010|         ALBERTON|               5014|       OFFENCES AGAINST ...|       PROPERTY DAMAGE A...|       Other property da...|            1|\n",
      "|    1/07/2010|          ALDGATE|               5154|       OFFENCES AGAINST ...|       THEFT AND RELATED...|                Other theft|            1|\n",
      "|    1/07/2010|           ALFORD|               5555|       OFFENCES AGAINST ...|       THEFT AND RELATED...|                Other theft|            1|\n",
      "|    1/07/2010|            AMATA|               5724|       OFFENCES AGAINST ...|       PROPERTY DAMAGE A...|       Property damage b...|            1|\n",
      "|    1/07/2010|            AMATA|               5724|       OFFENCES AGAINST ...|       ACTS INTENDED TO ...|       Serious Assault r...|            1|\n",
      "|    1/07/2010|     ANDREWS FARM|               5114|       OFFENCES AGAINST ...|       PROPERTY DAMAGE A...|       Other property da...|            1|\n",
      "|    1/07/2010|       ASCOT PARK|               5043|       OFFENCES AGAINST ...|       FRAUD DECEPTION A...|       Obtain benefit by...|            1|\n",
      "|    1/07/2010|       ATHELSTONE|               5076|       OFFENCES AGAINST ...|       PROPERTY DAMAGE A...|       Other property da...|            1|\n",
      "|    1/07/2010|           AUBURN|               5451|       OFFENCES AGAINST ...|       SERIOUS CRIMINAL ...|            SCT - Residence|            1|\n",
      "|    1/07/2010|           BELAIR|               5052|       OFFENCES AGAINST ...|       SERIOUS CRIMINAL ...|            SCT - Residence|            1|\n",
      "|    1/07/2010|         BIRDWOOD|               5234|       OFFENCES AGAINST ...|       SERIOUS CRIMINAL ...|        SCT - Non Residence|            1|\n",
      "|    1/07/2010|       BIRKENHEAD|               5015|       OFFENCES AGAINST ...|       ACTS INTENDED TO ...|             Common Assault|            1|\n",
      "|    1/07/2010|      BLAIR ATHOL|               5084|       OFFENCES AGAINST ...|       PROPERTY DAMAGE A...|       Other property da...|            1|\n",
      "|    1/07/2010|      BLAIR ATHOL|               5084|       OFFENCES AGAINST ...|       THEFT AND RELATED...|       Theft from motor ...|            1|\n",
      "+-------------+-----------------+-------------------+---------------------------+---------------------------+---------------------------+-------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#writting to the data base\n",
    "crime_data.write.format(\"com.mongodb.spark.sql.DefaultSource\").mode(\"overwrite\").save()\n",
    "crime_data.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## Read from the mongo db database\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Offence Count: string (nullable = true)\n",
      " |-- Offence Level 1 Description: string (nullable = true)\n",
      " |-- Offence Level 2 Description: string (nullable = true)\n",
      " |-- Offence Level 3 Description: string (nullable = true)\n",
      " |-- Postcode - Incident: string (nullable = true)\n",
      " |-- Reported Date: string (nullable = true)\n",
      " |-- Suburb - Incident: string (nullable = true)\n",
      " |-- _id: struct (nullable = true)\n",
      " |    |-- oid: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# reading from the database\n",
    "crime_data_df = spark.read.format(\"com.mongodb.spark.sql.DefaultSource\").load()\n",
    "# getting the schema of the db\n",
    "crime_data_df.printSchema()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistic for numeric and string Column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+------+\n",
      "|Offence Count| count|\n",
      "+-------------+------+\n",
      "|           28|     1|\n",
      "|           27|     1|\n",
      "|           12|    16|\n",
      "|         null|     1|\n",
      "|            1|639570|\n",
      "|           13|     6|\n",
      "|            6|   869|\n",
      "|           16|     4|\n",
      "|            3| 13443|\n",
      "|            5|  1761|\n",
      "|           15|     3|\n",
      "|            9|   127|\n",
      "|           17|     3|\n",
      "|            4|  4179|\n",
      "|            8|   270|\n",
      "|           23|     1|\n",
      "|            7|   468|\n",
      "|           10|    70|\n",
      "|           25|     1|\n",
      "|           11|    48|\n",
      "+-------------+------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "crime_data_df = crime_data_df.withColumn(\"Offence Count\",crime_data_df['Offence Count'].cast('int'))\n",
    "offence_count = crime_data_df.groupBy(\"Offence Count\").count()\n",
    "offence_count.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+\n",
      "|avg(Offence Count)|\n",
      "+------------------+\n",
      "|1.1715174585892079|\n",
      "+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# mean of the offence count\n",
    "offence_mean = crime_data_df.select(avg(\"Offence Count\"))\n",
    "offence_mean.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------------+\n",
      "|stddev_samp(Offence Count)|\n",
      "+--------------------------+\n",
      "|        0.5787050930378079|\n",
      "+--------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Stanadared deviation of the offence count\n",
    "offence_SD = crime_data_df.select(stddev(\"Offence Count\"))\n",
    "offence_SD.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+\n",
      "|max(Offence Count)|\n",
      "+------------------+\n",
      "|                28|\n",
      "+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# max of the offence count\n",
    "offence_max = crime_data_df.agg({\"Offence Count\":'max'})\n",
    "offence_max.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+\n",
      "|min(Offence Count)|\n",
      "+------------------+\n",
      "|                 1|\n",
      "+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# min of the offence count\n",
    "offence_min = crime_data_df.agg({\"Offence Count\":'min'})\n",
    "offence_min.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+------------------+\n",
      "|summary|     Offence Count|\n",
      "+-------+------------------+\n",
      "|  count|            727407|\n",
      "|   mean|1.1715174585892079|\n",
      "| stddev|0.5787050930378114|\n",
      "|    min|                 1|\n",
      "|    max|                28|\n",
      "+-------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# summary of the offence count column\n",
    "crime_data_df.describe(\"Offence Count\").show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+\n",
      "|max(Reported Date)|\n",
      "+------------------+\n",
      "|         9/12/2018|\n",
      "+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# max reported date\n",
    "reported_date_max = crime_data_df.agg({\"Reported Date\":'max'})\n",
    "reported_date_max.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+\n",
      "|min(Reported Date)|\n",
      "+------------------+\n",
      "|         1/01/2011|\n",
      "+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# minumum reported date\n",
    "reported_date_min = crime_data_df.agg({\"Reported Date\":'min'})\n",
    "reported_date_min.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+-------------+\n",
      "|summary|Reported Date|\n",
      "+-------+-------------+\n",
      "|  count|       727407|\n",
      "|   mean|         null|\n",
      "| stddev|         null|\n",
      "|    min|    1/01/2011|\n",
      "|    max|    9/12/2018|\n",
      "+-------+-------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# summary of the Reported Date column\n",
    "crime_data_df.describe(\"Reported Date\").show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "***\n",
    "## UDF to change Reported Date(string) to date.\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Offence Count: integer (nullable = true)\n",
      " |-- Offence Level 1 Description: string (nullable = true)\n",
      " |-- Offence Level 2 Description: string (nullable = true)\n",
      " |-- Offence Level 3 Description: string (nullable = true)\n",
      " |-- Postcode - Incident: string (nullable = true)\n",
      " |-- Reported Date: date (nullable = true)\n",
      " |-- Suburb - Incident: string (nullable = true)\n",
      " |-- _id: struct (nullable = true)\n",
      " |    |-- oid: string (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# UDF to change to reported date(string) to date data type\n",
    "reported_date = udf(lambda x: datetime.strptime(x,'%d/%m/%Y'),DateType())\n",
    "# changing the reported date to data data type\n",
    "crime_data_df=crime_data_df.withColumn(\"Reported Date\",(reported_date(col('Reported Date'))))\n",
    "# schema of the data frame\n",
    "crime_data_df.printSchema()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## How many level 2 offences are there? display the list of level 2 offences?\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Level 2 Offence: 9\n",
      "+------------------------------------+\n",
      "|Offence Level 2 Description         |\n",
      "+------------------------------------+\n",
      "|ROBBERY AND RELATED OFFENCES        |\n",
      "|PROPERTY DAMAGE AND ENVIRONMENTAL   |\n",
      "|SEXUAL ASSAULT AND RELATED OFFENCES |\n",
      "|HOMICIDE AND RELATED OFFENCES       |\n",
      "|ACTS INTENDED TO CAUSE INJURY       |\n",
      "|SERIOUS CRIMINAL TRESPASS           |\n",
      "|OTHER OFFENCES AGAINST THE PERSON   |\n",
      "|FRAUD DECEPTION AND RELATED OFFENCES|\n",
      "|THEFT AND RELATED OFFENCES          |\n",
      "+------------------------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# dropping the null value from the df\n",
    "crime_data_df=crime_data_df.dropna(subset=('Offence Level 2 Description'))\n",
    "# selecting the \"Offence Level 2 Description\"\n",
    "offence_type2 = crime_data_df.select(\"Offence Level 2 Description\")\n",
    "# counting the distinct number of records\n",
    "print(\"Total Level 2 Offence:\",offence_type2.distinct().count())\n",
    "#showing the record.\n",
    "offence_type2.distinct().show(truncate=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## What is number of offence aganist the person?\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+---------------------------+------------------+\n",
      "|Offence Level 1 Description|sum(Offence Count)|\n",
      "+---------------------------+------------------+\n",
      "|OFFENCES AGAINST THE PERSON|175644            |\n",
      "+---------------------------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# By the sum of offence count\n",
    "# creating the subset for 'Offence Level 1 Description'\n",
    "crime_data_df=crime_data_df.dropna(subset=('Offence Level 1 Description'))\n",
    "# calculating number of offence aganist the person\n",
    "offence_aganist_person = crime_data_df.groupBy(\"Offence Level 1 Description\").sum(\"Offence Count\")\n",
    "# filtering the offence_aganist_person\n",
    "offence_aganist_person= offence_aganist_person.filter(offence_aganist_person[\"Offence Level 1 Description\"]=='OFFENCES AGAINST THE PERSON')\n",
    "# showing the offence_aganist_person and sum(offence count)\n",
    "offence_aganist_person.show(truncate=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of offence againist the person: 156062\n"
     ]
    }
   ],
   "source": [
    "# by the count \n",
    "# creating the subset for 'Offence Level 1 Description'\n",
    "crime_data_df=crime_data_df.dropna(subset=('Offence Level 1 Description'))\n",
    "# calculating number of offence aganist the person\n",
    "offence_aganist_person= crime_data_df.filter(crime_data_df[\"Offence Level 1 Description\"]=='OFFENCES AGAINST THE PERSON').count()\n",
    "# showing the offence_aganist_person and sum(offence count)\n",
    "print(\"Number of offence againist the person:\",offence_aganist_person)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## How Many Serious criminal trespass with more than 1 offence count?\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Serious Offence aganinst person: 8579\n"
     ]
    }
   ],
   "source": [
    "# Filterning \"Offence Level 2 Description\" with Serious Offence aganinst person\n",
    "offence_aganist_person = crime_data_df.filter(crime_data_df[\"Offence Level 2 Description\"]=='SERIOUS CRIMINAL TRESPASS')\n",
    "# finding the Offence count greater than 1\n",
    "offence_serious_df=offence_aganist_person.filter(crime_data_df[\"Offence Count\"]>1)\n",
    "print(\"Serious Offence aganinst person:\",offence_serious_df.count())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## What percentage of crime are offence aganist the property.?\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of crimes againist property 79.3886196416208\n"
     ]
    }
   ],
   "source": [
    "# percentage of crime againist property by sum \"Offence Count\"\n",
    "\n",
    "#per_offence_aganist_property = crime_data_df.filter(crime_data_df[\"Offence Level 1 Description\"]=='OFFENCES AGAINST PROPERTY')\n",
    "property_offence_count= crime_data_df.groupBy(\"Offence Level 1 Description\").sum(\"Offence Count\")\n",
    "offence_property = property_offence_count.filter(property_offence_count[\"Offence Level 1 Description\"]=='OFFENCES AGAINST PROPERTY').collect().pop()[\"sum(Offence Count)\"]\n",
    "\n",
    "total_columns=crime_data_df.agg({\"Offence Count\":'sum'}).collect().pop()[\"sum(Offence Count)\"]\n",
    "\n",
    "percentage= (offence_property/total_columns)*100\n",
    "\n",
    "print(\"Percentage of crimes againist property\",percentage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of crimes againist property 78.54543604886948\n"
     ]
    }
   ],
   "source": [
    "# percentage of crime againist property by count of \"Offence Count\"\n",
    "\n",
    "# getting the count of offences aganist the person \n",
    "offence_property = crime_data_df.filter(property_offence_count[\"Offence Level 1 Description\"]=='OFFENCES AGAINST PROPERTY').count()\n",
    "# finding total column \n",
    "total_columns=crime_data_df.count()\n",
    "# Percentage of crime aganist property\n",
    "percentage= (offence_property/total_columns)*100\n",
    "\n",
    "print(\"Percentage of crimes againist property\",percentage)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## Exploratory Data Analysis\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Find the number of crimes per years:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# creating the column year which will have value of year from the reposrted date\n",
    "crime_data_df=crime_data_df.withColumn(\"Year\",year(col(\"Reported Date\")))\n",
    "# group by year and calculting sum of Offence Count\n",
    "group_by_year = crime_data_df.groupBy(\"Year\").sum(\"Offence Count\")\n",
    "# sorting by the year\n",
    "group_by_year=group_by_year.sort(col(\"Year\")).collect()\n",
    "#getting the list of the year\n",
    "x_axis=[row[\"Year\"] for row in group_by_year]\n",
    "# getting the list of sum(Offence Count)\n",
    "Y_axis=[row[\"sum(Offence Count)\"] for row in group_by_year]\n",
    "#Plotting the graph\n",
    "plt.figure(figsize=(10,8))\n",
    "# plotting the barchart\n",
    "plt.bar(x_axis,Y_axis)\n",
    "# formatting x label\n",
    "plt.xlabel(\"Year\")\n",
    "# formatting Y label\n",
    "plt.ylabel(\"Offence Count\")\n",
    "# formatting title\n",
    "plt.title(\"Number of Crimes Per Year\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above graph shows the number of crimes per year.\n",
    "- Year 2011 is been observed as the year with highest crime rates i.e 120000 followed by 2012 and 2013.\n",
    "- Year 2013 and year 2015 show almost same level of the crime.\n",
    "- Bar also shows after decreasing the crime rate from 2011 to 2014, crime rate increase gradually from 2015 till 2018\n",
    "- Lowest crime was reported in the year 2019 i.e 30000"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## Find the numbers of crimes per month:\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# creating the column year which will have value of month from the reported date\n",
    "crime_data_df=crime_data_df.withColumn(\"Month\",month(col(\"Reported Date\")))\n",
    "# group by year and calculting sum of Offence Count\n",
    "group_by_year = crime_data_df.groupBy(\"Month\").sum(\"Offence Count\")\n",
    "# sorting by the month\n",
    "group_by_year=group_by_year.sort(col(\"Month\")).collect()\n",
    "#getting the list of the month\n",
    "x_axis=[row[\"Month\"] for row in group_by_year]\n",
    "#getting the list of the sum(Offence Count)\n",
    "Y_axis=[row[\"sum(Offence Count)\"] for row in group_by_year]\n",
    "# plot the figure\n",
    "plt.figure(figsize=(18,8))\n",
    "# plot the bar\n",
    "plt.bar(x_axis,Y_axis)\n",
    "# x label\n",
    "plt.xlabel(\"Month\")\n",
    "# Y label\n",
    "plt.ylabel(\"Offence Count\")\n",
    "plt.title(\"Number of Crimes Per Month\")\n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above barchart shows the offence count per month..\n",
    "- January is been show as the highest offence count close to 78000 offence count\n",
    "- April is regarded as the month with the lowest offences with close to 6000 offence count\n",
    "- Between april- may the offence count are less as comapared to other month around the year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## Where do Most crime takes place?\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# getting the sum of offence count\n",
    "suburb_df= crime_data_df.groupBy(\"Suburb - Incident\",\"Postcode - Incident\").sum(\"Offence Count\")\n",
    "# ordeing in assending order\n",
    "suburb_df=suburb_df.orderBy(col(\"sum(Offence Count)\"),ascending=False)\n",
    "# cancating suburb and postcode\n",
    "sub_sort_df=suburb_df.withColumn(\"Suburb-Postcode\",concat(*[\"Suburb - Incident\",\"Postcode - Incident\"]))\n",
    "# list of suburb \n",
    "final_suburb_df=sub_sort_df.collect()\n",
    "# list of top 20 suburb\n",
    "list_suburb= final_suburb_df[0:19]\n",
    "# getting the x axis list\n",
    "x_axis=[row[\"Suburb-Postcode\"] for row in list_suburb]\n",
    "# getting the sum of the offence count list\n",
    "Y_axis=[row[\"sum(Offence Count)\"] for row in list_suburb]\n",
    "# plotting the graph\n",
    "plt.figure(figsize=(18,8))\n",
    "# bar chart\n",
    "plt.bar(x_axis,Y_axis)\n",
    "# xlabel\n",
    "plt.xlabel(\"Suburb-Postcode\")\n",
    "# y label\n",
    "plt.ylabel(\"Offence Count\")\n",
    "# xtricks\n",
    "plt.xticks(x_axis,rotation=30,fontsize=14)\n",
    "plt.title(\"Suburb with Most Number of Crimes\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above bar chart shows the suburbs with the most number of crimes.\n",
    "- Adelaide top the charts with the highest offence count with close to 45000. followed by port Augusta amd mount Gambiers.\n",
    "- Whyalla stuart has the lowest crime offences recorded.\n",
    "- As we go from Adelaide towars whyalla the offence crime decreases."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "## Find the number of serious criminal trespass by day and month?\n",
    "***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# getting the month from reported date\n",
    "sc_trespass_df=crime_data_df.withColumn(\"Month\",month(col(\"Reported Date\")))\n",
    "# getting the day of week from reported date\n",
    "sc_trespass_df=sc_trespass_df.withColumn(\"Day of Month\",dayofweek(col(\"Reported Date\")))\n",
    "# filter the Serious criminal trespass\n",
    "sc_trespass_df=sc_trespass_df.filter(sc_trespass_df[\"Offence Level 2 Description\"]==\"SERIOUS CRIMINAL TRESPASS\")\n",
    "# group by month and day of week and calculating sum of offence count\n",
    "trespass_df= sc_trespass_df.groupBy(\"Month\",\"Day of Month\").sum(\"Offence Count\")\n",
    "# sorting by month\n",
    "trespass_df=trespass_df.sort(col(\"Month\"),col(\"Day of Month\"))\n",
    "# cincat month-day of the week\n",
    "trespass_df=trespass_df.withColumn(\"Month-Day of week\",concat(*[\"Month\",\"Day of Month\"])).collect()\n",
    "# X axis list\n",
    "x_axis=[row[\"Month-Day of week\"] for row in trespass_df]\n",
    "# Y axis list\n",
    "Y_axis=[row[\"sum(Offence Count)\"] for row in trespass_df]\n",
    "# plotting the graph\n",
    "plt.figure(figsize=(18,8))\n",
    "# bar plot\n",
    "plt.bar(x_axis,Y_axis)\n",
    "# xlabel\n",
    "plt.xlabel(\"Month - Day Of the Week\")\n",
    "#y label\n",
    "plt.ylabel(\"Offence Count\")\n",
    "# xtricks for the graph\n",
    "plt.xticks(x_axis,rotation='vertical',fontsize=14)\n",
    "# title\n",
    "plt.title(\"Serious criminal Trespass by day and month\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The above bar chart shows Serious criminal Trespass by day and month. it shows offence count based on day of the month.\n",
    "- For the month january, day 2(Tuesday) recorded the highest number of offence and day 7(sunday) the lowest.\n",
    "- similary for feburary, 2(Tuesday) was the highest and  7 (sunday) was the lowest.\n",
    "- Overall october,10- Tuesday's was the highest among all the recorded offences and Sunday's in june  was the lowest among all the days across all the months.\n",
    "- On the X-axis first number represent the month, and second value number(1 to 7) represents the day of the week(1=Monday ,2=tuesday,3-wednesday,4-thursday,5-friday,6-saturday,7-sunday). \n",
    "\n",
    "Its been observed that day 2(Tuesday) of every month record the highest number of the offence count and day 7(sunday) record the lowest number of offence count."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
